
local nodegraph = include "nav2ain/nodegraph.lua"
local cvars = include "nav2ain/cvars.lua"

local drawRate = 0.25
local devMode = GetConVar("developer")

local convertedGraph = nil
local drawnGraph = nil

local function FilterMesh(mesh, minArea)
    local newMesh = {}

    for i, mesh in ipairs(mesh) do
        local area = mesh:GetSizeX() * mesh:GetSizeY()

        if area > minArea then
            table.insert(newMesh, mesh)
        end
    end

    return newMesh
end

local function DrawArea(area)
    debugoverlay.Line(area:GetCorner(0), area:GetCorner(1), drawRate + 0.2, Color(255, 0, 0), false)
    debugoverlay.Line(area:GetCorner(1), area:GetCorner(2), drawRate + 0.2, Color(255, 0, 0), false)
    debugoverlay.Line(area:GetCorner(2), area:GetCorner(3), drawRate + 0.2, Color(255, 0, 0), false)
    debugoverlay.Line(area:GetCorner(3), area:GetCorner(0), drawRate + 0.2, Color(255, 0, 0), false)
end

local function DrawMesh(ply, mesh)
    if not devMode:GetBool() then return end

    timer.Remove("nav2ain_DrawMesh")
    timer.Create("nav2ain_DrawMesh", drawRate, 0, function()
        local trace = ply:GetEyeTrace()
        if not trace.Hit then return end

        for _, area in ipairs(mesh) do
            if area:GetCenter():Distance(trace.HitPos) < 500 then
                DrawArea(area)
            end
        end
    end)
end

local function CreateNodes(graph, mesh)
    for _, area in ipairs(mesh) do
        graph:AddNode(area:GetCenter() + Vector(0, 0, 10), {
            areaId = area:GetID()
        })
    end
end

local function Convert(ply, cmd, args, str)
    if not game.SinglePlayer() then
        MsgE("Please run in single player mode")
        return
    end

    local graph = nodegraph.Graph()
    graph:ConvertNavmesh()

    graph:Draw(ply, drawRate)
    
    convertedGraph = graph

    --[[
    local initialMesh = navmesh.GetAllNavAreas()
    MsgN("Number of initial areas: " .. #initialMesh)

    local simplifiedMesh = FilterMesh(initialMesh, 2500)
    MsgN("Number of filtered areas: " .. #simplifiedMesh)

    if #simplifiedMesh > 1500 then
        MsgN("Need to filter again, still too many areas...")
        simplifiedMesh = FilterMesh(simplifiedMesh, 5000)

        if #simplifiedMesh > 1500 then
            MsgN("Still too many areas, aborting...")
            return
        end
    end

    MsgN()
    local graph = nodegraph.Graph()

    CreateNodes(graph, simplifiedMesh)
    MsgN("Created nodes, now creating links...")

    graph:AutoLink(ply, drawRate)
    MsgN("Created links, now drawing graph...")

    graph:Draw(ply, drawRate)

    MsgN()
    MsgN("Final number of nodes: " .. #graph.nodes)
    MsgN("Final number of links: " .. graph:NumLinks())

    convertedGraph = graph
    HACK_GLOBAL_GRAPH = graph

    MsgN("To save the graph, use the 'nav2ain_save' command")
    ]]
end

local function Save(ply, cmd, args, str)
    if not game.SinglePlayer() then
        MsgE("Please run in single player mode")
        return
    end

    if convertedGraph == nil then
        MsgE("No graph has been generated yet, please use the 'nav2ain_convert' command first")
        return
    end

    convertedGraph:Save()

    MsgF("Done writing, the graph has been saved to: '$YOUR_GMOD_FOLDER/data/%s'", convertedGraph.pathForSaving)
    MsgF("Rename the file to '%s' and move the file into the '$YOUR_GMOD_FOLDER/maps/graphs' directory. Upon reloading the map, the new nodegraph should be used", game.GetMap() .. ".ain")
    MsgN("I recommend backing up any old nodegraphs first")
    MsgN("You will need to exit the current map in order to overwrite the nodegraph file")
end

local function Draw(ply, cmd, args, str)
    if not game.SinglePlayer() then
        MsgE("Please run in single player mode")
        return
    end

    local graph = nodegraph.Graph()
    MsgF("Graph path: %s", graph.path)

    graph:Load()
    MsgN("Loading complete")

    MsgF("# Nodes = %s", #graph.nodes)

    MsgN("Drawing nodes and links")
    graph:Draw(ply, drawRate)
end

local function ClearDraw(ply, cmd, args, str)
    timer.Remove("nav2ain_DrawMesh")
    nodegraph.Graph.DrawClear()
end

concommand.Add("nav2ain_convert", Convert, nil, "Converts a generated navigation mesh (through the console command 'nav_generate') to an AI Node Graph")
concommand.Add("nav2ain_save", Save, nil, "Saves a generated node graph (through the console command 'nav2ain_convert') to an .ain file on the disk")
concommand.Add("nav2ain_draw", Draw, nil, "Loads and renders the nodegraph for the current map (developer mode must be enabled for drawing to activate")
concommand.Add("nav2ain_draw_clear", ClearDraw, nil, "Clears any nodegraph currently being drawn, or any nav mesh being drawn")
